name: update readme with RSS feed

on:
  schedule:
    # Once a day at 8 AM
    - cron: 0 8 * * *
  workflow_dispatch:
  repository_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Public IP
        id: ip
        run: |
          result=$(curl https://ipinfo.io/json)
          ip=$(echo $result | jq -r '.ip')
          echo "::set-output name=public_ip::$ip"

      - name: Use Public IP
        run: |
          echo "The public IP is ${{ steps.ip.outputs.public_ip }}"

      - name: Make CF API request and extract Rules ID
        id: extract_id
        run: |
          ipv4=${{ steps.ip.outputs.public_ip }}    
          response=$(curl --request POST \
            --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/firewall/access_rules/rules \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.CF_API_KEY }}' \
            --data '{"mode":"whitelist","configuration":{"target":"ip","value":"'"$ipv4"'"},"notes":"Github Action IP for API ACCESS"}')
          echo "Response: $response"
          id=$(echo $response | jq -r '.result.id')
          echo "Extracted ID: $id"
          echo "ID=$id" >> $GITHUB_ENV

      - name: Wait for IP to appear in Access Rules
        id: wait_for_ip
        run: |
          ipv4=${{ steps.ip.outputs.public_ip }}
          max_retries=10
          retry_interval=1
          count=0
          while [ $count -lt $max_retries ]; do
            sleep $retry_interval
            response=$(curl --request GET \
              --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/firewall/access_rules/rules \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer ${{ secrets.CF_API_KEY }}')
            ip_in_rules=$(echo $response | jq -r --arg ip "$ipv4" '[.result[] | select(.configuration.value == $ip)] | length')
            if [ "$ip_in_rules" -gt 0 ]; then
              echo "IP $ipv4 is now whitelisted."
              rule_id=$(echo $response | jq -r --arg ip "$ipv4" '.result[] | select(.configuration.value == $ip) | .id')
              echo "::set-output name=rule_id::$rule_id"
              break
            fi
            echo "IP $ipv4 not found yet, waiting..."
            count=$((count + 1))
          done
          if [ $count -eq $max_retries ]; then
            echo "Failed to verify IP $ipv4 in access rules after $max_retries retries."
            exit 1
          fi

      - name: Update README with RSS feed
        uses: xiaotianxt/rss-to-readme@main
        with:
          feed-url: https://xiaotian.dev/index.xml
          token: ${{ secrets.token }}

      - name: Delete IP from Access Rules
        run: |
          rule_id=${{ steps.wait_for_ip.outputs.rule_id }}
          response=$(curl --request DELETE \
            --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/firewall/access_rules/rules/$rule_id \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.CF_API_KEY }}')
          echo "Delete Response: $response"
          success=$(echo $response | jq -r '.success')
          if [ "$success" != "true" ]; then
            echo "Failed to delete rule with ID $rule_id"
            exit 1
          fi
          echo "Successfully deleted rule with ID $rule_id"
